OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
shader ColorKeyer	%meta{string,help,"Keys Specific Colors"} %meta{string,label,"Color Keyer"} 
param	int	Bypass	0		%meta{string,widget,"checkBox"}  %read{77,77} %write{2147483647,-1}
param	color	Texture	0 0 0		%read{2,78} %write{2147483647,-1}
param	color	ColorToExtract	0 0 0.800000012		%read{4,4} %write{2147483647,-1}
param	float	HueTolerance	0.00999999978		%meta{float,min,0} %meta{float,max,1}  %read{9,9} %write{2147483647,-1}
param	float	SatTolerance	0		%meta{float,min,0} %meta{float,max,1}  %read{24,24} %write{2147483647,-1}
param	float	ValTolerance	1		%meta{float,min,0} %meta{float,max,1}  %read{39,39} %write{2147483647,-1}
param	int	InvertMatte	0		%meta{string,widget,"checkBox"}  %read{75,75} %write{2147483647,-1}
param	float	Contrast	0		%meta{float,min,0} %meta{float,max,1}  %read{53,53} %write{2147483647,-1}
param	float	Factor	1		%meta{float,min,0} %meta{float,max,10}  %read{74,74} %write{2147483647,-1}
oparam	color	Matte	0 0 0		%read{2147483647,-1} %write{78,79}
local	float	errorMargin	%read{9,39} %write{0,0}
local	color	TextureHSV	%read{5,35} %write{2,2}
local	color	ColorHSV	%read{6,36} %write{4,4}
local	float	hue	%read{50,50} %write{19,19}
local	float	sat	%read{50,50} %write{34,34}
local	float	val	%read{51,51} %write{49,49}
local	float	mask	%read{65,79} %write{51,76}
local	float	contrast_remapped	%read{62,63} %write{61,61}
local	float	contrast_min	%read{65,68} %write{62,62}
local	float	contrast_max	%read{68,68} %write{63,63}
local	float	contrast_mask	%read{74,74} %write{73,73}
const	float	$const1	9.99999975e-05		%read{0,0} %write{2147483647,-1}
const	string	$const2	"hsv"		%read{2,4} %write{2147483647,-1}
const	string	$const3	"transformc"		%read{1,3} %write{2147483647,-1}
const	string	$const4	"rgb"		%read{2,4} %write{2147483647,-1}
temp	float	$tmp1	%read{11,11} %write{8,8}
const	int	$const5	0		%read{5,6} %write{2147483647,-1}
temp	float	$tmp2	%read{7,7} %write{5,5}
temp	float	$tmp3	%read{7,7} %write{6,6}
temp	float	$tmp4	%read{8,8} %write{7,7}
const	float	$const6	0		%read{11,73} %write{2147483647,-1}
temp	float	$tmp5	%read{14,14} %write{9,9}
const	int	$const7	1		%read{20,21} %write{2147483647,-1}
const	float	$const8	1		%read{12,76} %write{2147483647,-1}
const	string	$const9	"changeRange"		%read{10,64} %write{2147483647,-1}
temp	float	$tmp6	%read{13,13} %write{11,11}
temp	float	$tmp7	%read{13,13} %write{12,12}
temp	float	$tmp8	%read{15,15} %write{13,13}
temp	float	$tmp9	%read{15,15} %write{14,14}
temp	float	$tmp10	%read{16,16} %write{15,15}
temp	float	$tmp11	%read{18,18} %write{16,16}
const	string	$const10	"clamp"		%read{17,71} %write{2147483647,-1}
temp	float	$tmp12	%read{19,19} %write{18,18}
temp	float	$tmp13	%read{26,26} %write{23,23}
temp	float	$tmp14	%read{22,22} %write{20,20}
temp	float	$tmp15	%read{22,22} %write{21,21}
temp	float	$tmp16	%read{23,23} %write{22,22}
temp	float	$tmp17	%read{29,29} %write{24,24}
temp	float	$tmp18	%read{28,28} %write{26,26}
temp	float	$tmp19	%read{28,28} %write{27,27}
temp	float	$tmp20	%read{30,30} %write{28,28}
temp	float	$tmp21	%read{30,30} %write{29,29}
temp	float	$tmp22	%read{31,31} %write{30,30}
temp	float	$tmp23	%read{33,33} %write{31,31}
temp	float	$tmp24	%read{34,34} %write{33,33}
temp	float	$tmp25	%read{41,41} %write{38,38}
const	int	$const11	2		%read{35,36} %write{2147483647,-1}
temp	float	$tmp26	%read{37,37} %write{35,35}
temp	float	$tmp27	%read{37,37} %write{36,36}
temp	float	$tmp28	%read{38,38} %write{37,37}
temp	float	$tmp29	%read{44,44} %write{39,39}
temp	float	$tmp30	%read{43,43} %write{41,41}
temp	float	$tmp31	%read{43,43} %write{42,42}
temp	float	$tmp32	%read{45,45} %write{43,43}
temp	float	$tmp33	%read{45,45} %write{44,44}
temp	float	$tmp34	%read{46,46} %write{45,45}
temp	float	$tmp35	%read{48,48} %write{46,46}
temp	float	$tmp36	%read{49,49} %write{48,48}
temp	float	$tmp37	%read{51,51} %write{50,50}
const	float	$const12	0.5		%read{54,63} %write{2147483647,-1}
temp	float	$tmp38	%read{55,55} %write{53,53}
temp	float	$tmp39	%read{55,55} %write{54,54}
temp	float	$tmp40	%read{57,57} %write{55,55}
temp	float	$tmp41	%read{57,57} %write{56,56}
temp	float	$tmp42	%read{58,58} %write{57,57}
temp	float	$tmp43	%read{60,60} %write{58,58}
temp	float	$tmp44	%read{61,61} %write{60,60}
temp	float	$tmp45	%read{67,67} %write{65,65}
temp	float	$tmp46	%read{67,67} %write{66,66}
temp	float	$tmp47	%read{69,69} %write{67,67}
temp	float	$tmp48	%read{69,69} %write{68,68}
temp	float	$tmp49	%read{70,70} %write{69,69}
temp	float	$tmp50	%read{72,72} %write{70,70}
temp	float	$tmp51	%read{73,73} %write{72,72}
code ___main___
# Keyer.osl:36
#     float errorMargin = 0.0001;
	assign		errorMargin $const1 	%filename{"Keyer.osl"} %line{36} %argrw{"wr"}
# Keyer.osl:37
#     color TextureHSV = transformc("hsv", Texture);
	functioncall	$const3 3 	%line{37} %argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:326
# color transformc (string to, color c) { return transformc ("rgb", to, c); }
	transformc	TextureHSV $const4 $const2 Texture 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{326} %argrw{"wrrr"}
# Keyer.osl:38
#     color ColorHSV = transformc("hsv", ColorToExtract);
	functioncall	$const3 5 	%filename{"Keyer.osl"} %line{38} %argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:326
# color transformc (string to, color c) { return transformc ("rgb", to, c); }
	transformc	ColorHSV $const4 $const2 ColorToExtract 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{326} %argrw{"wrrr"}
# Keyer.osl:39
#     float hue = changeRange(abs(TextureHSV[0]-ColorHSV[0]), 0, HueTolerance+errorMargin, 1, 0);
	compref		$tmp2 TextureHSV $const5 	%filename{"Keyer.osl"} %line{39} %argrw{"wrr"}
	compref		$tmp3 ColorHSV $const5 	%argrw{"wrr"}
	sub		$tmp4 $tmp2 $tmp3 	%argrw{"wrr"}
	abs		$tmp1 $tmp4 	%argrw{"wr"}
	add		$tmp5 HueTolerance errorMargin 	%argrw{"wrr"}
	functioncall	$const9 20 	%argrw{"r"}
# Keyer.osl:10
#     return clamp(to_min + (val - from_min) * (to_max - to_min) / (from_max - from_min), 0, 1);
	sub		$tmp6 $tmp1 $const6 	%line{10} %argrw{"wrr"}
	sub		$tmp7 $const6 $const8 	%argrw{"wrr"}
	mul		$tmp8 $tmp6 $tmp7 	%argrw{"wrr"}
	sub		$tmp9 $tmp5 $const6 	%argrw{"wrr"}
	div		$tmp10 $tmp8 $tmp9 	%argrw{"wrr"}
	add		$tmp11 $const8 $tmp10 	%argrw{"wrr"}
	functioncall	$const10 20 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp12 $tmp11 $const8 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{163} %argrw{"wrr"}
	max		hue $tmp12 $const6 	%argrw{"wrr"}
# Keyer.osl:40
#     float sat = changeRange(abs(TextureHSV[1]-ColorHSV[1]), 0, SatTolerance+errorMargin, 1, 0);
	compref		$tmp14 TextureHSV $const7 	%filename{"Keyer.osl"} %line{40} %argrw{"wrr"}
	compref		$tmp15 ColorHSV $const7 	%argrw{"wrr"}
	sub		$tmp16 $tmp14 $tmp15 	%argrw{"wrr"}
	abs		$tmp13 $tmp16 	%argrw{"wr"}
	add		$tmp17 SatTolerance errorMargin 	%argrw{"wrr"}
	functioncall	$const9 35 	%argrw{"r"}
# Keyer.osl:10
#     return clamp(to_min + (val - from_min) * (to_max - to_min) / (from_max - from_min), 0, 1);
	sub		$tmp18 $tmp13 $const6 	%line{10} %argrw{"wrr"}
	sub		$tmp19 $const6 $const8 	%argrw{"wrr"}
	mul		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
	sub		$tmp21 $tmp17 $const6 	%argrw{"wrr"}
	div		$tmp22 $tmp20 $tmp21 	%argrw{"wrr"}
	add		$tmp23 $const8 $tmp22 	%argrw{"wrr"}
	functioncall	$const10 35 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp24 $tmp23 $const8 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{163} %argrw{"wrr"}
	max		sat $tmp24 $const6 	%argrw{"wrr"}
# Keyer.osl:41
#     float val = changeRange(abs(TextureHSV[2]-ColorHSV[2]), 0, ValTolerance+errorMargin, 1, 0);
	compref		$tmp26 TextureHSV $const11 	%filename{"Keyer.osl"} %line{41} %argrw{"wrr"}
	compref		$tmp27 ColorHSV $const11 	%argrw{"wrr"}
	sub		$tmp28 $tmp26 $tmp27 	%argrw{"wrr"}
	abs		$tmp25 $tmp28 	%argrw{"wr"}
	add		$tmp29 ValTolerance errorMargin 	%argrw{"wrr"}
	functioncall	$const9 50 	%argrw{"r"}
# Keyer.osl:10
#     return clamp(to_min + (val - from_min) * (to_max - to_min) / (from_max - from_min), 0, 1);
	sub		$tmp30 $tmp25 $const6 	%line{10} %argrw{"wrr"}
	sub		$tmp31 $const6 $const8 	%argrw{"wrr"}
	mul		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
	sub		$tmp33 $tmp29 $const6 	%argrw{"wrr"}
	div		$tmp34 $tmp32 $tmp33 	%argrw{"wrr"}
	add		$tmp35 $const8 $tmp34 	%argrw{"wrr"}
	functioncall	$const10 50 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp36 $tmp35 $const8 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{163} %argrw{"wrr"}
	max		val $tmp36 $const6 	%argrw{"wrr"}
# Keyer.osl:42
#     float mask = hue*sat*val;
	mul		$tmp37 hue sat 	%filename{"Keyer.osl"} %line{42} %argrw{"wrr"}
	mul		mask $tmp37 val 	%argrw{"wrr"}
# Keyer.osl:44
#     float contrast_remapped = changeRange(Contrast, 0, 1, 0.5, 0);
	functioncall	$const9 62 	%line{44} %argrw{"r"}
# Keyer.osl:10
#     return clamp(to_min + (val - from_min) * (to_max - to_min) / (from_max - from_min), 0, 1);
	sub		$tmp38 Contrast $const6 	%line{10} %argrw{"wrr"}
	sub		$tmp39 $const6 $const12 	%argrw{"wrr"}
	mul		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
	sub		$tmp41 $const8 $const6 	%argrw{"wrr"}
	div		$tmp42 $tmp40 $tmp41 	%argrw{"wrr"}
	add		$tmp43 $const12 $tmp42 	%argrw{"wrr"}
	functioncall	$const10 62 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp44 $tmp43 $const8 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{163} %argrw{"wrr"}
	max		contrast_remapped $tmp44 $const6 	%argrw{"wrr"}
# Keyer.osl:45
#     float contrast_min = 0.5-contrast_remapped;
	sub		contrast_min $const12 contrast_remapped 	%filename{"Keyer.osl"} %line{45} %argrw{"wrr"}
# Keyer.osl:46
#     float contrast_max = 0.5+contrast_remapped;
	add		contrast_max $const12 contrast_remapped 	%line{46} %argrw{"wrr"}
# Keyer.osl:47
#     float contrast_mask = changeRange(mask, contrast_min, contrast_max, 0, 1);
	functioncall	$const9 74 	%line{47} %argrw{"r"}
# Keyer.osl:10
#     return clamp(to_min + (val - from_min) * (to_max - to_min) / (from_max - from_min), 0, 1);
	sub		$tmp45 mask contrast_min 	%line{10} %argrw{"wrr"}
	sub		$tmp46 $const8 $const6 	%argrw{"wrr"}
	mul		$tmp47 $tmp45 $tmp46 	%argrw{"wrr"}
	sub		$tmp48 contrast_max contrast_min 	%argrw{"wrr"}
	div		$tmp49 $tmp47 $tmp48 	%argrw{"wrr"}
	add		$tmp50 $const6 $tmp49 	%argrw{"wrr"}
	functioncall	$const10 74 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp51 $tmp50 $const8 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{163} %argrw{"wrr"}
	max		contrast_mask $tmp51 $const6 	%argrw{"wrr"}
# Keyer.osl:48
#     mask = contrast_mask * Factor;
	mul		mask contrast_mask Factor 	%filename{"Keyer.osl"} %line{48} %argrw{"wrr"}
# Keyer.osl:49
#     if (InvertMatte){mask = 1-mask;}
	if		InvertMatte 77 77 	%line{49} %argrw{"r"}
	sub		mask $const8 mask 	%argrw{"wrr"}
# Keyer.osl:51
#     Matte = (Bypass)?Texture:mask;
	if		Bypass 79 80 	%line{51} %argrw{"r"}
	assign		Matte Texture 	%argrw{"wr"}
	assign		Matte mask 	%argrw{"wr"}
	end
